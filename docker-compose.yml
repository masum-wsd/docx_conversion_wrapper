# Created by: Abdullah Al Masum
# Description: everything should be dockerized

services:
  app:
    image: docx_conversion_wrapper:latest
    container_name: docx_conversion_wrapper_app
    ports:
      - "${APPLICATION_PORT}:8080"   # Expose port 8080 for the Spring Boot application
    environment:
      - SPRING_PROFILES_ACTIVE=dev  # You can set your environment variables here
    build:
      context: .  # Dockerfile is located in the current directory
      dockerfile: Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${APPLICATION_PORT}/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
#    networks:
#      - grafana
    volumes:
      - "${PROMETHEUS_DATA}:/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    #    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
#    networks:
#      - grafana
    volumes:
      - "${GRAFANA_DATA}:/etc/grafana/provisioning/datasources"
  
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "${LOKI_PORT}:3100"
    command: ['-config.file=/etc/loki/local-config.yaml']
    #    restart: unless-stopped
#    networks:
#      - grafana
  
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ '-config.file=/etc/tempo.yaml' ]
    volumes:
      - "${TEMPO_CONFIG}:/etc/tempo.yaml:ro"
      - "${TEMPO_DATA}:/tmp/tempo"
    ports:
      - '${TEMPO_PORT}:3200' # Tempo
      - '${TEMPO_ZIPKIN_PORT}:9411' # Zipkin
#    networks:
#      - grafana

  minio:
    image: docker.io/bitnami/minio:latest
    container_name: minio
    ports:
      - '${MINIO_PORT}:9000'
      - '${MINIO_CONSOLE_PORT}:9001'
    volumes:
      - "${MINIO_DATA}:/data"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  
  keycloak:
    image: bitnami/keycloak:latest
    container_name: bitnami_keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      DB_VENDOR: ${KEYCLOAK_DB_VENDOR}
      DB_ADDR: ${KEYCLOAK_DB_HOST}
      DB_PORT: ${KEYCLOAK_DB_PORT}
      DB_DATABASE: ${KEYCLOAK_DB_NAME}
      DB_USER: ${KEYCLOAK_DB_USER}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    ports:
      - "${KEYCLOAK_PORT}:8080"
    networks:
      - app-network
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    container_name: db-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}  
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app-network
#    volumes:
#      - postgres-data:/var/lib/postgresql/data


  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: 'abdullahmasum6035@gmail.com'
      PGADMIN_DEFAULT_PASSWORD: 'password'
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - app-network
    
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      REDIS_PASSWORD: "root"
    volumes:
      - redis_data:/data

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "${SONARQUBE_PORT}:9000"
    networks:
      - backend
    volumes:
      - "${SONARQUBE_CONFIG}:/opt/sonarqube/conf"
      - "${SONARQUBE_DATA}:/opt/sonarqube/data"
      - "${SONARQUBE_EXTENSIONS}:/opt/sonarqube/extensions"
      - "${SONARQUBE_PLUGINS}:/opt/sonarqube/lib/bundled-plugins"

networks:
  backend:
#  grafana:
#    driver: bridge
  app-network:
    driver: bridge
    
volumes:
  redis_data:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA}

